#!/bin/bash

# unfreeze: manage APT pinning for packages (add/remove), optionally including dependencies
# Usage: unfreeze <add|remove> [--depends] <pkg1> [pkg2 ...]

set -euo pipefail

ACTION="$1"
shift

# Check for --depends flag
INCLUDE_DEPS=false
if [[ "${1:-}" == "--depends" ]]; then
  INCLUDE_DEPS=true
  shift
fi

if [[ "$ACTION" != "add" && "$ACTION" != "remove" ]]; then
  echo "Usage: $0 add|remove [--depends] <package1> [package2 ...]"
  exit 1
fi

if [[ $# -lt 1 ]]; then
  echo "Error: At least one package name must be provided."
  echo "Usage: $0 add|remove [--depends] <package1> [package2 ...]"
  exit 1
fi

# Function to gather package list (including dependencies if requested)
get_pkg_list() {
  local pkg="$1"
  local pkgs=("$pkg")
  if \$INCLUDE_DEPS && [[ "$ACTION" == "add" ]]; then
    # Gather direct dependencies
    while read -r dep; do
      pkgs+=("$dep")
    done < <(apt-cache depends "$pkg" 2>/dev/null | awk '/Depends:/ {print $2}')
  fi
  printf "%s\n" "${pkgs[@]}"
}

for PKG in "$@"; do
  # Build list of packages to handle
  MAPFILE=( )
  mapfile -t MAPFILE < <(get_pkg_list "$PKG")

  for P in "${MAPFILE[@]}"; do
    PREF_FILE="/etc/apt/preferences.d/$P"

    if [[ "$ACTION" == "add" ]]; then
      if ! apt-cache show "$P" > /dev/null 2>&1; then
        echo "[!] Package '$P' not found in APT, skipping."
        continue
      fi

      cat <<EOF | sudo tee "$PREF_FILE" > /dev/null
Package: $P
Pin: origin "deb.debian.org"
Pin-Priority: 1001
EOF
      echo "[+] Pin created for '$P'"

    else # remove
      if [[ -f "$PREF_FILE" ]]; then
        sudo rm -f "$PREF_FILE"
        echo "[-] Pin file removed for '$P'"
      else
        echo "[!] No pin file for '$P', skipping."
      fi
    fi
  done
done

exit 0
